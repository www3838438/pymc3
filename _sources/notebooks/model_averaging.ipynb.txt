{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use(['seaborn-darkgrid'])\n",
    "import pymc3 as pm\n",
    "import numpy as np\n",
    "import  pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model averaging\n",
    "\n",
    "When confronted with more than one model we have several options. One of them is to perform model selection, using for example a given Information Criterion as exemplified [in this notebook](model_comparsion.ipynb) and this other [example](model_comparsion.ipynb). Model selection is appealing for its simplicity, but we are discarding information about the uncertainty in our models. This is somehow similar to computing the full posterior and then just keep a point-estimate like the posterior mean; we may become overconfident of what we really know.\n",
    "\n",
    "One alternative is to perform model selection but discuss all the different models together with the computed values of a given Information Criterion. It is important to put all these numbers and tests in the context of our problem so that we and our audience can have a better feeling of the possible limitations and shortcomings of our methods. If you are in the academic world you can use this approach to add elements to the discussion section of a paper, presentation, thesis, and so on.\n",
    "\n",
    "Yet another approach is to perform model averaging. The idea now is to generate a meta-model (and meta-predictions) using a weighted average of the models. There are several ways to do this and PyMC3 includes 3 of them that we are going to briefly discuss, you will find a more thorough explanation in the work by [Yuling Yao et. al.](https://arxiv.org/abs/1704.02030)\n",
    "\n",
    "## Pseudo Bayesian model averaging\n",
    "\n",
    "Bayesian models can be weighted by their marginal likelihood, this is known as Bayesian Model Averaging. While this is theoretically appealing, is problematic in practice: on the one hand the marginal likelihood is highly sensible to the specification of the prior, in a way that parameter estimation is not, and on the other computing the marginal likelihood is usually a challenging task. An alternative route is to use the values of WAIC (Widely Applicable Information Criterion) or LOO (pareto-smoothed importance sampling Leave-One-Out cross-validation), which we will call generically IC, to estimate weights. We can do this by using the following formula:\n",
    "\n",
    "$$w_i = \\frac {e^{ \\frac{1}{2} dIC_i }} {\\sum_j^M e^{ - \\frac{1}{2} dIC_j }}$$\n",
    "\n",
    "Where $dIC_i$ is the difference between the i-esim information criterion value and the lowest one. Remember that the lowest the value of the IC, the better. We can use any information criterion we want to compute a set of weights, but, of course, we cannot mix them. \n",
    "\n",
    "This approach is called pseudo Bayesian model averaging, or Akaike-like weighting and is an heuristic way to compute the relative probability of each model (given a fixed set of models) from the information criteria values. Look how the denominator is just a normalization term to ensure that the weights sum up to one.\n",
    "\n",
    "## Pseudo Bayesian model averaging with Bayesian Bootstrapping\n",
    "\n",
    "The above formula for computing weights is a very nice and simple approach, but with one major caveat it does not take into account the uncertainty in the computation of the IC. We could compute the standard error of the IC (assuming a Gaussian approximation) and modify the above formula accordingly. Or we can do something more robust, like using a [Bayesian Bootstrapping](http://www.sumsar.net/blog/2015/04/the-non-parametric-bootstrap-as-a-bayesian-model/) to estimate, and incorporate this uncertainty.\n",
    "\n",
    "## Stacking\n",
    "\n",
    "The third approach implemented in PyMC3 is know as _stacking of predictive distributions_ and it has been recently [proposed](https://arxiv.org/abs/1704.02030). We want to combine several models in a metamodel in order to minimize the diverge between the meta-model and the _true_ generating model, when using a logarithmic scoring rule this is equivalently to:\n",
    "\n",
    "$$\\max_{n} \\frac{1}{n} \\sum_{i=1}^{n}log\\sum_{k=1}^{K} w_k p(y_i|y_{-i}, M_k)$$\n",
    "\n",
    "Where $n$ is the number of data points and $K$ the number of models. To enforce a solution we constrain $w$ to be $w_k \\ge 0$ and  $\\sum_{k=1}^{K} w_k = 1$. \n",
    "\n",
    "The quantity $p(y_i|y_{-i}, M_k)$ is the leave-one-out predictive distribution for the $M_k$ model. Computing it requires fitting each model $n$ times, each time leaving out one data point. Fortunately we can approximate the exact leave-one-out predictive distribution using LOO (or even WAIC), and that is what we do in practice.\n",
    "\n",
    "## Weighted posterior predictive samples\n",
    "\n",
    "Once we have computed the weights, using any of the above 3 methods,  we can use them to get a weighted posterior predictive samples. PyMC3 offers functions to perform these steps in a simple way, so let see them in action using an example.\n",
    "\n",
    "The following example is taken from the superb book [Statistical Rethinking](http://xcelab.net/rm/statistical-rethinking/) by Richard McElreath. You will find more PyMC3 examples from this book in this [repository](https://github.com/aloctavodia/Statistical-Rethinking-with-Python-and-PyMC3). We are going to explore a simplified version of it. Check the book for the whole example and a more thorough discussion of both, the biological motivation for this problem and a theoretical/practical discussion of using Information Criteria to compare, select and average models.\n",
    "\n",
    "Briefly, our problem is as follows: We want to explore the composition of milk across several primate species, it is hypothesized that females from species of primates with larger brains produce more _nutritious_ milk (loosely speaking this is done _in order to_ support the development of such big brains). This is an important question for evolutionary biologists and try to give and answer we will use 3 variables, two predictor variables: the proportion of neocortex compare to the total mass of the brain and the logarithm of the body mass of the mothers. And for predicted variable, the kilocalories per gram of milk. With these variables we are going to build 3 different linear models:\n",
    " \n",
    "1. A model using only the neocortex variable\n",
    "2. A model using only the logarithm of the mass variable\n",
    "3. A model using both variables\n",
    "\n",
    "Let start by uploading the data and centering the `neocortex` and `log mass` variables, for better sampling."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>kcal.per.g</th>\n",
       "      <th>neocortex</th>\n",
       "      <th>log_mass</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.49</td>\n",
       "      <td>-0.123706</td>\n",
       "      <td>-0.831353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.47</td>\n",
       "      <td>-0.030706</td>\n",
       "      <td>0.158647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.56</td>\n",
       "      <td>-0.030706</td>\n",
       "      <td>0.181647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.89</td>\n",
       "      <td>0.000294</td>\n",
       "      <td>-0.579353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.92</td>\n",
       "      <td>0.012294</td>\n",
       "      <td>-1.885353</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   kcal.per.g  neocortex  log_mass\n",
       "0        0.49  -0.123706 -0.831353\n",
       "1        0.47  -0.030706  0.158647\n",
       "2        0.56  -0.030706  0.181647\n",
       "3        0.89   0.000294 -0.579353\n",
       "4        0.92   0.012294 -1.885353"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = pd.read_csv('../data/milk.csv')\n",
    "d.iloc[:,1:] = d.iloc[:,1:] - d.iloc[:,1:].mean()\n",
    "d.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have the data we are going to build our first model using only the `neocortex`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (2 chains in 2 jobs)\n",
      "NUTS: [sigma_log__, beta, alpha]\n",
      "100%|██████████| 2500/2500 [00:03<00:00, 678.85it/s] \n"
     ]
    }
   ],
   "source": [
    "with pm.Model() as model_0:\n",
    "    alpha = pm.Normal('alpha', mu=0, sd=10)\n",
    "    beta = pm.Normal('beta', mu=0, sd=10)\n",
    "    sigma = pm.HalfNormal('sigma', 10)\n",
    "    \n",
    "    mu = alpha + beta * d['neocortex']\n",
    "    \n",
    "    kcal = pm.Normal('kcal', mu=mu, sd=sigma, observed=d['kcal.per.g'])\n",
    "    trace_0 = pm.sample(2000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second model is exactly the same as the first one, except we now use the logarithm of the mass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (2 chains in 2 jobs)\n",
      "NUTS: [sigma_log__, beta, alpha]\n",
      "100%|██████████| 2500/2500 [00:03<00:00, 670.85it/s]\n"
     ]
    }
   ],
   "source": [
    "with pm.Model() as model_1:\n",
    "    alpha = pm.Normal('alpha', mu=0, sd=10)\n",
    "    beta = pm.Normal('beta', mu=0, sd=1)\n",
    "    sigma = pm.HalfNormal('sigma', 10)\n",
    "    \n",
    "    mu = alpha + beta * d['log_mass']\n",
    "    \n",
    "    kcal = pm.Normal('kcal', mu=mu, sd=sigma, observed=d['kcal.per.g'])\n",
    "    \n",
    "    trace_1 = pm.sample(2000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And finally the third model using the `neocortex` and `log_mass` variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Auto-assigning NUTS sampler...\n",
      "Initializing NUTS using jitter+adapt_diag...\n",
      "Multiprocess sampling (2 chains in 2 jobs)\n",
      "NUTS: [sigma_log__, beta, alpha]\n",
      "100%|██████████| 2500/2500 [00:05<00:00, 448.13it/s]\n",
      "/home/osvaldo/Documentos/Proyectos/01_PyMC3/pymc3/pymc3/step_methods/hmc/nuts.py:452: UserWarning: The acceptance probability in chain 1 does not match the target. It is 0.88222106478, but should be close to 0.8. Try to increase the number of tuning steps.\n",
      "  % (self._chain_id, mean_accept, target_accept))\n"
     ]
    }
   ],
   "source": [
    "with pm.Model() as model_2:\n",
    "    alpha = pm.Normal('alpha', mu=0, sd=10)\n",
    "    beta = pm.Normal('beta', mu=0, sd=1, shape=2)\n",
    "    sigma = pm.HalfNormal('sigma', 10)\n",
    "\n",
    "    mu = alpha + pm.math.dot(beta, d[['neocortex','log_mass']].T)\n",
    "\n",
    "    kcal = pm.Normal('kcal', mu=mu, sd=sigma, observed=d['kcal.per.g'])\n",
    "\n",
    "    trace_2 = pm.sample(2000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have sampled the posterior for the 3 models, we are going to compare them visually. One option is to use the `forestplot` function that supports plotting more than one trace."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n/9SXa6nEbGTkAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f85452a3c50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "traces = [trace_0, trace_1, trace_2]\n",
    "pm.forestplot(traces);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another option is to plot several traces in a same plot is to use `densityplot`. This plot is somehow similar to a forestplot, but we get truncated KDE plots (by default 95% credible intervals) grouped by variable names together with a point estimate (by default the mean)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n8/8LFsjMVa6clwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8545294550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pm.densityplot(traces);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have sampled the posterior for the 3 models, we are going to use WAIC (Widely applicable information criterion) to compare the 3 models. We can do this using the `compare` function included with PyMC3."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>WAIC</th>\n",
       "      <th>pWAIC</th>\n",
       "      <th>dWAIC</th>\n",
       "      <th>weight</th>\n",
       "      <th>SE</th>\n",
       "      <th>dSE</th>\n",
       "      <th>warning</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-15.2</td>\n",
       "      <td>2.65</td>\n",
       "      <td>0</td>\n",
       "      <td>0.87</td>\n",
       "      <td>4.8</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-9.02</td>\n",
       "      <td>2.01</td>\n",
       "      <td>6.18</td>\n",
       "      <td>0.06</td>\n",
       "      <td>4.02</td>\n",
       "      <td>2.1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-7.29</td>\n",
       "      <td>1.88</td>\n",
       "      <td>7.91</td>\n",
       "      <td>0.07</td>\n",
       "      <td>2.93</td>\n",
       "      <td>4.09</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   WAIC pWAIC dWAIC weight    SE   dSE warning\n",
       "2 -15.2  2.65     0   0.87   4.8     0       1\n",
       "1 -9.02  2.01  6.18   0.06  4.02   2.1       1\n",
       "0 -7.29  1.88  7.91   0.07  2.93  4.09       1"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "models = [model_0, model_1, model_2]\n",
    "comp = pm.compare(traces, models, method='BB-pseudo-BMA')\n",
    "comp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that the best model is `model_2`, the one with both predictor variables. Notice the DataFrame is ordered from lowest to highest WAIC (_i.e_ from _better_ to _worst_ model). Check [this notebook](model_comparison.ipynb) for a more detailed discussing on model comparison.\n",
    "\n",
    "We can also see that we get a column with the relative `weight` for each model (according to the first equation at the beginning of this notebook). This weights can be _vaguely_ interpreted as the probability that each model will make the correct predictions on future data. Of course this interpretation is conditional on the models used to compute the weights, if we add or remove models the weights will change. And also is dependent on the assumptions behind WAIC (or any other Information Criterion used). So try to do not overinterpret these `weights`. \n",
    "\n",
    "Now we are going to use copmuted `weights` to generate predictions based not on a single model but on the weighted set of models. This is one way to perform model averaging. Using PyMC3 we can call the `sample_ppc_w` function as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ppc_w = pm.sample_ppc_w(traces, 1000, models,\n",
    "                        weights=comp.weight.sort_index(ascending=True),\n",
    "                        progressbar=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Notice that we are passing the weights ordered by their index. We are doing this because we pass `traces` and `models` ordered from model 0 to 2, but the computed weights are ordered from lowest to highest WAIC (or equivalently from larger to lowest weight). In summary, we must be sure that we are correctly pairing the weights and models.\n",
    "\n",
    "We are also going to compute PPCs for the lowest-WAIC model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ppc_2 = pm.sample_ppc(trace_2, 1000, model_2,\n",
    "                     progressbar=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A simple way to compare both kind of predictions is to plot their mean and hpd interval"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAV0AAAEBCAYAAADbxHY7AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAFxdJREFUeJzt3X1Y1fXBx/HP4fAQCoIWmZqCoqym\nhlL5cO9CXVpqZoUP4G2ealmZ5j1bOkNRM2eWmrPNZpPygcvMZTZSNytTM101p4GWpmND5FYsSgTl\nyYNHfvcfznOPwAMifI9nvV9/5fl5fufjuejNuQ7ww2ZZliUAgBF+3h4AAD8kRBcADCK6AGAQ0QUA\ng4guABhEdAHAIH9PB7/7rrjWE4SEBKmkxNlggxobexsXexsXextXQ+2NiAi95LErfqXr72+/0lMY\nxd7Gxd7Gxd7GZWIvby8AgEFEFwAMIroAYBDRBQCDiC4AGER0AcAgogsABhFdwAe9dyhfQ1N3q8ei\nnRqaulvvHcr39iQ5nU6NGDH0ksczMvbq2WenVbv9d7/7jcaN+5keffRBbdyY3pgTrwoefyINwNXn\nvUP5mrflHzrrqpQkfVPs1Lwt/5AkDb65pTenXbaMjL06fvyYli1bqYqKCjkcierXr7+aNWvm7WmN\nhugCPmLcW/vl7++nzGNFOne+6i98Oeuq1K8+yNK7X3yjZUmxl33uzZs36ZNPdsrpdKqg4KRGjvxv\n7dr1sXJysvXkk5MUH99PW7a8p3Xr1iogIEBt27bT1Kkpqqio0Jw5M1RcXKw2bW50ny87+596+eWF\nstv91LRpiKZNe7bGx+3cuas6doyRJNlsNlVWVsrf/z87S//Z/zrgP9D3g1vb7XVVVlamxYt/p61b\nP9Bbb72p1NRVysz8XG+/vVa33NJNy5cv08qVa9SkSVP99reLtGHDO5Kk9u2jNW7ckzp48IAyMvZK\nkubPn6tp02ape/cueuONN7VmTZpuv71ntccMCgpSUFCQXC6X5s59Vvfem6AmTZpc0b/jakd0AR+x\nLClW4eFNFL/gI31TXP2iLDeEBtXrVe5FnTr9SJIUEhKqqKj2stlsCg0NldNZoRMn8tS+fQc1adJU\nkhQbG6c9e/4qSerZs7ckqXPnLu5Xqbm5OVq06EX5+9vldDrVtm3kJR/3zJkzmjnzGXXvfqscjp/V\ne7+vILqAj5kQH1XlPV1JusbfTxPio67ovDab7ZLHWrVqo6NHc1ReXq7g4GDt25ehtm3byWbz04ED\nXyo+vp+ysg7L5XJJktq1i9SMGXN0000dtHPnpyooOFnjeZ3Os3rqqfEaNWqM7rpr8BXt9xVEF/Ax\nF79YtnTXUeUXO9UyNEgT4qMa9Yto4eHheuSRcfr5z8fJZvPTjTe21RNPTJTdbtcLLzyn8ePHKjIy\nSgEBAZKkyZOnae7cWfLzk1yuSiUnz9TJk99VO++7776jEyfytHFjuvs7F6ZPf1atW7dptH+Lt9k8\n/Qr2ulxPNzy8iYqKyhp0VGNib+Nib+Nib+NqqL2Nej1dAEDdEV0AMIjoAoBBRBcADCK6AGAQ0QUA\ng4gu4IOCstLVIq2nrvtdW7VI66mgLPNX51q9epW++urAJY9PnPi4jhw5Uu32d955q86P8eqrS7R5\n86Z67fMkN/eoJk58/JLHN2/epFdfXdLgjysRXcDnBGWlK/SjqbKX5MkmS/aSPIV+NNV4eB2Oh/Xj\nH3e57Pulpa1ohDW+g59IA3xEWPoI2f3tCs3bI9v5iirHbK5yhW6frGsOrtHphPWXfe5HHnlAixYt\nUWhoM919d3+98soyxcTcpEceeUC///1Kbdz4R3344Qey2Wzq3/8ujRw5Ss8/P1v9+9+l7t3j9Ktf\nPauCgu90/fUttW9fpjZseF+S9OqrS5Wf/63Ky8s1e/bz2rr1A505c1ovvfSinnpqihYunKfjx4+p\nsrJSjz02XnFxt2nHjm1KS1uu8PDmOnfunCIjo6psXb58mfLyjquoqEjFxaeVkDBSO3Zs17FjuUpJ\neU5dunTV2rVvaNu2LbLb7YqN7a4JE36ukydPas6cGbIsSy1aXOs+X2bm50pNXSq73a6oqEg99dQz\n7mNOp1OzZiWrtLRUTudZjR//c8XF3XbZz++/I7qAr/lecGu9vQ7i4/tp9+7PdP31LdWqVWvt2bNb\nAQGBatu2nfLyjmvbtg+1dOnrstlseuqpCerZs5f7vhs2pKt169aaO3e+cnOPyuFIdB/r06eP4uMH\naPnyZdqxY5seemis3nlnnaZMSVZ6+nqFhYVr2rRZOn26SE8++bjeeGOdli79rV57LU3NmoXpl7+c\nVOPeoKAg/frXS7R69Sp99tknWrBgsf78543atm2LgoODtX37h/r971fIbrcrJWWqPvlklzIzP9eA\n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\nL1/u/sb83NxcJScny9/fX23atFFeXp5Wr15t8inBDxDRhREFBQUaP368pk+frtjYWK1atUpt2rTR\n4sWLlZWVpU8//VSBgYEaMmSI7rrrLuXn58vhcFwyutKFHz2dM2eO1qxZo2XLlik+Pl7Hjx/XH/7w\nBzmdTiUmJrp/Umvo0KG68847q9x/wYIFeuKJJ9S3b1+tW7dOeXl5jfocABLRhSG7du1SRESEKisr\nJV24ZsfFa17ExMQoJiZG+fn5SktL05YtWxQSElLtKmDf16tXL0kX4rt9+3a1bNlSBw8edF+U2uVy\n6cSJE5Kk9u3bV7t/dna2+2fqb731Vm3atKlh/rGAB7ynCyPuv/9+LVy4UDNmzFBZWZmio6P15Zdf\nSpKOHTumyZMna8WKFerWrZteeuklDRo0qNbfNnHxmq0ZGRnq2LGjOnTooJ49e2r16tVKS0vT4MGD\ndeONN0pSjdecjYmJUWZmpqQLv0EAMIFXujCmY8eOuvfee/XCCy9oxowZmj59usaMGaPz589r+vTp\nKi0t1ezZs7Vp0yaFh4fLbreroqLikue7eGnO4OBgLViwQOHh4frb3/6m0aNHq6ysTAMGDKhyjdfv\nmzJliqZPn64VK1YoNDS0xmurAg2NC97AJzkcDs2ePVvR0dH1PsfGjRsVGxuryMhIvf3228rIyNAL\nL7zQgCuB6vjUjh+sVq1a6Re/+IWCg4Pl5+enefPmeXsSfgB4pQsABvGFNAAwiOgCgEFEFwAMIroA\nYBDRBQCDiC4AGPR/qMTzZuFZxJgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f8539f53dd8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "mean_w = ppc_w['kcal'].mean()\n",
    "hpd_w = pm.hpd(ppc_w['kcal']).mean(0)\n",
    "\n",
    "mean = ppc_2['kcal'].mean()\n",
    "hpd = pm.hpd(ppc_2['kcal']).mean(0)\n",
    "\n",
    "plt.errorbar(mean, 1, xerr=[[mean - hpd]], fmt='o', label='model 2')\n",
    "plt.errorbar(mean_w, 0, xerr=[[mean_w - hpd_w]], fmt='o', label='weighted models')\n",
    "\n",
    "plt.yticks([])\n",
    "plt.ylim(-1, 2)\n",
    "plt.xlabel('kcal per g')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see the mean value is almost the same for both predictions but the uncertainty in the weighted model is larger. We have effectively propagated the uncertainty about which model we should select to the posterior predictive samples. You can now try with the other two methods for computing weights `stacking` (the default and recommended method) and `pseudo-BMA`.\n",
    "\n",
    "**Final notes:** \n",
    "\n",
    "There are other ways to average models such as, for example, explicitly building a meta-model that includes all the models we have. We then perform parameter inference while jumping between the models. One problem with this approach is that jumping between models could hamper the proper sampling of the posterior.\n",
    "\n",
    "Besides averaging discrete models we can sometimes think of continuous versions of them. A toy example is to imagine that we have a coin and we want to estimated it's degree of bias, a number between 0 and 1 being 0.5 equal chance of head and tails. We could think of two separated models one with a prior biased towards heads and one towards tails. We could fit both separate models and then average them using, for example, IC-derived weights. An alternative, is to build a hierarchical model to estimate the prior distribution, instead of contemplating two discrete models we will be computing a continuous model that includes these the discrete ones as particular cases. Which approach is better? That depends on our concrete problem. Do we have good reasons to think about two discrete models, or is our problem better represented with a continuous bigger model?"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
